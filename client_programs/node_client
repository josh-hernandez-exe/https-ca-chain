#!/usr/bin/env node

var ws = require('ws');
var fs = require('fs');
var https = require('https');
var constants = require('constants');
var config = JSON.parse(fs.readFileSync("config.json"));

var projectRoot = __dirname+"/.."

var clientSuffix=""
var parentType="intermediate"
var useWebsocket = false;

var isUsed = []
process.argv.forEach(function(value,index,array){
    isUsed.push(false)
})
process.argv.forEach(function(value,index,array){
    if (isUsed[index]){
        // do nothing
    } else if (index==0){
        isUsed[index]=true;

    } else if (value === __filename ){
        isUsed[index] = true;

    } else if (
        value === "--parent-type" &&
        array.length >= index
    ) {
        parentType = array[index+1];
        isUsed[index] = true;
        isUsed[index+1] = true;

    } else if (value === "--websocket") {
        useWebsocket = true;
        isUsed[index] = true;

    } else if (!isUsed[index]) {
        serverSuffix=value;
        isUsed[index] = true;
    }
});

var clientName="client"+clientSuffix;
var clientFolder=projectRoot+"/client";

var clientKeyFile=[
    clientFolder,
    "private",
    clientName+".key.pem"
].join("/");

var clientCertFile=[
    clientFolder,
    "certs",
    clientName+".cert.pem"
].join("/");

var clientCertChainFile=[
    clientFolder,
    "certs",
    clientName+".chain.cert.pem"
].join("/");

// var options = {
//     hostname: 'localhost',
//     port: config.port,
//     path: '/',
//     method: 'GET',
//     key: fs.readFileSync(clientKeyFile),
//     cert: fs.readFileSync(clientCertFile),
//     ca: fs.readFileSync(clientCertFile),
//     passphrase:"",
//     requestCert: true,
//     rejectUnauthorized: true,
//     ciphers: [
//       "ECDHE-RSA-AES128-SHA256",
//       "DHE-RSA-AES128-SHA256",
//       "AES128-GCM-SHA256",
//       "!RC4",
//       "HIGH",
//       "!MD5",
//       "!aNULL"
//     ].join(":"),
//     honorCipherOrder: true,
//     secureProtocol: 'TLSv1_method',
//     secureOptions: constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_SSLv2
// };

var options = {
    hostname: config.hostname,
    port: config.port,
    path: '/',
    method: 'GET',
    key: fs.readFileSync(clientKeyFile),
    cert: fs.readFileSync(clientCertFile),
    ca: fs.readFileSync(clientCertFile),
    };


https.globalAgent.options.ca = [];
if(parentType === "master"){
    https.globalAgent.options.ca.push(fs.readFileSync(projectRoot+"/"+config.master.cert));
} else if(parentType === "intermediate"){
    https.globalAgent.options.ca.push(fs.readFileSync(projectRoot+"/"+config.intermediate.chain));
} else {
    throw Error("Parent type not valid");
}

var req = https.request(options, function(res) {
    res.on('data', function(data) {
        process.stdout.write(data);
    });
});

req.end();

req.on('error', function(e) {
    console.error(e);
});


if (useWebsocket) {

    var url = config.websocket.protocol+ "://" +  config.hostname + ":" + config.port + config.websocket.endpoint

    ws = new ws(url);
    ws.on('open', function() {
        ws.send('something');
    });
    ws.on('message', function(message) {
        console.log('received: %s', message);
    });
}

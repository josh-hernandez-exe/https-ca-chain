#!/usr/bin/env node

var ws = require('ws');
var fs = require('fs');
var https = require('https');
var constants = require('constants');
var config = JSON.parse(fs.readFileSync("config.json"));

// Just in case we move make multiple server and move them into a folder
var projectRoot = __dirname

var serverSuffix=""
var parentType="intermediate"

var isUsed = []
process.argv.forEach(function(value,index,array){
    isUsed.push(false)
})
process.argv.forEach(function(value,index,array){
    if (isUsed[index]){
        // do nothing
    } else if (index==0){
        isUsed[index]=true;

    } else if (value === __filename ){
        isUsed[index] = true;

    } else if (
        value === "--parent-type" &&
        array.length >= index
    ) {
        parentType = array[index+1];
        isUsed[index] = true;
        isUsed[index+1] = true;

    } else if (!isUsed[index]) {
        serverSuffix=value;
        isUsed[index] = true;
    }
});



var serverName="server"+serverSuffix;
var serverFolder=projectRoot+"/server";

var serverKeyFile=[
    serverFolder,
    "private",
    serverName+".key.pem"
].join("/");

var serverCertFile=[
    serverFolder,
    "certs",
    serverName+".cert.pem"
].join("/");

var serverCertChainFile=[
    serverFolder,
    "certs",
    serverName+".chain.cert.pem"
].join("/");


// var serverCertChainList = [
//     fs.readFileSync(serverCertFile),
//     fs.readFileSync(projectRoot+"/"+config.intermediate.cert),
//     fs.readFileSync(projectRoot+"/"+config.master.cert)
// ]

var crlFile = "";
if(parentType==="master"){
    crlFile = projectRoot + "/" + config.master.crl;
} else if(parentType==="intermediate"){
    crlFile = projectRoot + "/" + config.intermediate.crl;
} else {
    throw Error("Parent type not valid");
}

// var options = {
//     key: fs.readFileSync(serverKeyFile),
//     cert: fs.readFileSync(serverCertFile),
//     ca: fs.readFileSync(serverCertChainFile),
//     crl: fs.readFileSync(crlFile),
//     passphrase:"",
//     requestCert: true,
//     rejectUnauthorized: true,
//     ciphers: [
//       "ECDHE-RSA-AES128-SHA256",
//       "DHE-RSA-AES128-SHA256",
//       "AES128-GCM-SHA256",
//       "!RC4",
//       "HIGH",
//       "!MD5",
//       "!aNULL"
//     ].join(":"),
//     honorCipherOrder: true,
//     secureProtocol: 'TLSv1_method'
// };


var options = {
    key: fs.readFileSync(serverKeyFile),
    cert: fs.readFileSync(serverCertFile),
    ca: fs.readFileSync(serverCertChainFile),
    crl: fs.readFileSync(crlFile),
    requestCert: true,
    rejectUnauthorized: true
};

https.globalAgent.options.ca = [];
if(parentType === "master"){
    https.globalAgent.options.ca.push(fs.readFileSync(projectRoot+"/"+config.master.cert));
} else if(parentType === "intermediate"){
    https.globalAgent.options.ca.push(fs.readFileSync(projectRoot+"/"+config.intermediate.chain));
} else {
    throw Error("Parent type not valid");
}


secureServer = https.createServer(options, function (req, res) {
    if (req.socket.authorized){ // shouldn't even get here if not authorized
        console.log([
            new Date(),
            req.connection.remoteAddress,
            req.socket.getPeerCertificate().subject.CN
        ].join("\t"));
        res.writeHead(200);
        res.end("hello world\n");
    } else {
        console.log("Rejected");
        // console.log(req.socket.getPeerCertificate());
    }
}).listen(config.port);

console.log('https is listening on 0.0.0.0:'+config.port);


wsConnection = new ws.Server({
    server: secureServer,
    path: config.websocket.endpoint,
});

wsConnection.on('connection', (websocket) => {
    websocket.on('open', () => {
        console.log('[Websocket][Connection][Open]');
    });

    websocket.on('error', (error) => {
        console.error('[Websocket][Connection][Error]:'+error);
    });

    websocket.on('message', (message) => {
        console.log('[Websocket][Connection][Message]: '+message)
    });

    websocket.on('close', () => {
        console.log('[Websocket][Connection][Close]');
    });
});

wsConnection.on('error', (error) => {
    console.error('[Websocket][Error]:'+error);
});
